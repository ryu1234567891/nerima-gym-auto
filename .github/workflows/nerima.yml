name: Nerima Availability (every 3 hours)

on:
  workflow_dispatch:
    inputs:
      force_mail:
        type: boolean
        default: false
        description: "今回抽出した全件を送る（差分無視）"
  schedule:
    - cron: "0 */3 * * *"   # 3時間おき（UTC）。JSTでも3時間間隔で動きます

permissions:
  contents: read

concurrency:
  group: nerima-bot
  cancel-in-progress: false   # かぶり実行を避ける

jobs:
  run-both:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies (pip + Playwright)
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          python -m playwright install --with-deps chromium

      - name: Run Indoors (屋内スポーツ施設)
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          MAIL_TO:   ${{ secrets.MAIL_TO }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          FORCE_MAIL: ${{ github.event.inputs.force_mail && '1' || secrets.FORCE_MAIL }}
        run: |
          python main.py

      - name: Run Culture (文化施設)
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          MAIL_TO:   ${{ secrets.MAIL_TO }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          FORCE_MAIL: ${{ github.event.inputs.force_mail && '1' || secrets.FORCE_MAIL }}
          CATEGORY1_LABEL: "文化施設"
        run: |
          python main.py

      - name: Upload logs & snapshots (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nerima-data-${{ github.run_id }}
          path: |
            data/**/*.html
            data/**/*.txt
            data/*.json
          retention-days: 7

                # ===== SMTP 送信テスト（一時的）=====
      - name: SMTP health check (force send)
        if: ${{ always() }}
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          MAIL_TO:   ${{ secrets.MAIL_TO }}
        run: |
          python - <<'PY'
          import os, sys
          sys.path.append('.')
          try:
              from modules.notifier import send_mail
          except Exception as e:
              print("import notifier failed:", e)
              raise
          # notifier.send_mail が期待する形に合わせたダミー1件
          records = [{
              "date_iso": "2025-01-01",
              "start":    "09:00",
              "end":      "12:00",
              "facility_name": "SMTPテスト（CI）"
          }]
          print("sending test mail...")
          ok = send_mail(records, dry_run=False)
          print("sent:", ok)
          PY


